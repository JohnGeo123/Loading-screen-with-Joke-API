"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _InlineResponse = _interopRequireDefault(require("../com.humorapi.client.model/InlineResponse2002"));
var _InlineResponse2 = _interopRequireDefault(require("../com.humorapi.client.model/InlineResponse2003"));
var _InlineResponse3 = _interopRequireDefault(require("../com.humorapi.client.model/InlineResponse2008"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Memes service.
* @module com.humorapi.client/com.humorapi/MemesApi
* @version 1.0
*/
var MemesApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new MemesApi. 
  * @alias module:com.humorapi.client/com.humorapi/MemesApi
  * @class
  * @param {module:com.humorapi.client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:com.humorapi.client/ApiClient#instance} if unspecified.
  */
  function MemesApi(apiClient) {
    _classCallCheck(this, MemesApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the downvoteMeme operation.
   * @callback module:com.humorapi.client/com.humorapi/MemesApi~downvoteMemeCallback
   * @param {String} error Error message, if any.
   * @param {module:com.humorapi.client/com.humorapi.client.model/InlineResponse2008} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Downvote a Meme
   * Downvote a meme. See https://humorapi.com/docs/#Downvote-Meme for more.
   * @param {Number} id The object's id.
   * @param {module:com.humorapi.client/com.humorapi/MemesApi~downvoteMemeCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:com.humorapi.client/com.humorapi.client.model/InlineResponse2008}
   */
  _createClass(MemesApi, [{
    key: "downvoteMeme",
    value: function downvoteMeme(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downvoteMeme");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse3["default"];
      return this.apiClient.callApi('/memes/{id}/downvote', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the randomMeme operation.
     * @callback module:com.humorapi.client/com.humorapi/MemesApi~randomMemeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.humorapi.client/com.humorapi.client.model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Random Meme
     * Get a random meme. See https://humorapi.com/docs/#Random-Meme for more.
     * @param {Object} opts Optional parameters
     * @param {String} opts.keywords A comma separated list of keywords.
     * @param {module:com.humorapi.client/com.humorapi.client.model/Boolean} opts.keywordsInImage Whether the keywords should be found in the meme's image.
     * @param {module:com.humorapi.client/com.humorapi.client.model/String} opts.mediaType The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
     * @param {Number} opts.number The number of results to retrieve between 1 and 10.
     * @param {Number} opts.minRating The minimum rating between 0 and 10 the result should have.
     * @param {module:com.humorapi.client/com.humorapi/MemesApi~randomMemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.humorapi.client/com.humorapi.client.model/InlineResponse2003}
     */
  }, {
    key: "randomMeme",
    value: function randomMeme(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'keywords': opts['keywords'],
        'keywords-in-image': opts['keywordsInImage'],
        'media-type': opts['mediaType'],
        'number': opts['number'],
        'min-rating': opts['minRating']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse2["default"];
      return this.apiClient.callApi('/memes/random', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchMemes operation.
     * @callback module:com.humorapi.client/com.humorapi/MemesApi~searchMemesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.humorapi.client/com.humorapi.client.model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Memes
     * Search for memes. See https://humorapi.com/docs/#Search-Memes for more.
     * @param {Object} opts Optional parameters
     * @param {String} opts.keywords A comma separated list of keywords.
     * @param {module:com.humorapi.client/com.humorapi.client.model/Boolean} opts.keywordsInImage Whether the keywords should be found in the meme's image.
     * @param {module:com.humorapi.client/com.humorapi.client.model/String} opts.mediaType The type of the content. Can be either 'image' or 'video' or specific formats such as 'jpg', 'png', 'gif', or 'mp4'.
     * @param {Number} opts.number The number of results to retrieve between 1 and 10.
     * @param {Number} opts.minRating The minimum rating between 0 and 10 the result should have.
     * @param {Number} opts.offset The number of results to skip.
     * @param {module:com.humorapi.client/com.humorapi/MemesApi~searchMemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.humorapi.client/com.humorapi.client.model/InlineResponse2002}
     */
  }, {
    key: "searchMemes",
    value: function searchMemes(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'keywords': opts['keywords'],
        'keywords-in-image': opts['keywordsInImage'],
        'media-type': opts['mediaType'],
        'number': opts['number'],
        'min-rating': opts['minRating'],
        'offset': opts['offset']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/memes/search', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the upvoteMeme operation.
     * @callback module:com.humorapi.client/com.humorapi/MemesApi~upvoteMemeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.humorapi.client/com.humorapi.client.model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upvote a Meme
     * Upvote a meme. See https://humorapi.com/docs/#Upvote-Meme for more.
     * @param {Number} id The object's id.
     * @param {module:com.humorapi.client/com.humorapi/MemesApi~upvoteMemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.humorapi.client/com.humorapi.client.model/InlineResponse2008}
     */
  }, {
    key: "upvoteMeme",
    value: function upvoteMeme(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling upvoteMeme");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse3["default"];
      return this.apiClient.callApi('/memes/{id}/upvote', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return MemesApi;
}();