"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _InlineResponse = _interopRequireDefault(require("../com.humorapi.client.model/InlineResponse2001"));
var _InlineResponse2 = _interopRequireDefault(require("../com.humorapi.client.model/InlineResponse2005"));
var _InlineResponse3 = _interopRequireDefault(require("../com.humorapi.client.model/InlineResponse2006"));
var _InlineResponse4 = _interopRequireDefault(require("../com.humorapi.client.model/InlineResponse2007"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Humor API
 * Awesome Humor API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@humorapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Other service.
* @module com.humorapi.client/com.humorapi/OtherApi
* @version 1.0
*/
var OtherApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new OtherApi. 
  * @alias module:com.humorapi.client/com.humorapi/OtherApi
  * @class
  * @param {module:com.humorapi.client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:com.humorapi.client/ApiClient#instance} if unspecified.
  */
  function OtherApi(apiClient) {
    _classCallCheck(this, OtherApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the generateNonsenseWord operation.
   * @callback module:com.humorapi.client/com.humorapi/OtherApi~generateNonsenseWordCallback
   * @param {String} error Error message, if any.
   * @param {module:com.humorapi.client/com.humorapi.client.model/InlineResponse2007} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Generate Nonsense Word
   * Generate a nonsense word. See https://humorapi.com/docs/#Generate-Nonsense-Word for more.
   * @param {module:com.humorapi.client/com.humorapi/OtherApi~generateNonsenseWordCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:com.humorapi.client/com.humorapi.client.model/InlineResponse2007}
   */
  _createClass(OtherApi, [{
    key: "generateNonsenseWord",
    value: function generateNonsenseWord(callback) {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse4["default"];
      return this.apiClient.callApi('/words/nonsense/random', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the insult operation.
     * @callback module:com.humorapi.client/com.humorapi/OtherApi~insultCallback
     * @param {String} error Error message, if any.
     * @param {module:com.humorapi.client/com.humorapi.client.model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insult
     * Insult somebody for doing something. See https://humorapi.com/docs/#Insult for more.
     * @param {String} name The person's name.
     * @param {String} reason The reason for the praise/insult.
     * @param {module:com.humorapi.client/com.humorapi/OtherApi~insultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.humorapi.client/com.humorapi.client.model/InlineResponse2005}
     */
  }, {
    key: "insult",
    value: function insult(name, reason, callback) {
      var postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling insult");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling insult");
      }
      var pathParams = {};
      var queryParams = {
        'name': name,
        'reason': reason
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse2["default"];
      return this.apiClient.callApi('/insult', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the praise operation.
     * @callback module:com.humorapi.client/com.humorapi/OtherApi~praiseCallback
     * @param {String} error Error message, if any.
     * @param {module:com.humorapi.client/com.humorapi.client.model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Praise
     * Praise somebody for doing something. See https://humorapi.com/docs/#Praise for more.
     * @param {String} name The person's name.
     * @param {String} reason The reason for the praise/insult.
     * @param {module:com.humorapi.client/com.humorapi/OtherApi~praiseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.humorapi.client/com.humorapi.client.model/InlineResponse2005}
     */
  }, {
    key: "praise",
    value: function praise(name, reason, callback) {
      var postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling praise");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling praise");
      }
      var pathParams = {};
      var queryParams = {
        'name': name,
        'reason': reason
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse2["default"];
      return this.apiClient.callApi('/praise', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the rateWord operation.
     * @callback module:com.humorapi.client/com.humorapi/OtherApi~rateWordCallback
     * @param {String} error Error message, if any.
     * @param {module:com.humorapi.client/com.humorapi.client.model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rate Word
     * Rate the funniness of a word. See https://humorapi.com/docs/#Rate-Word for more.
     * @param {String} word The word to be rated.
     * @param {module:com.humorapi.client/com.humorapi/OtherApi~rateWordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.humorapi.client/com.humorapi.client.model/InlineResponse2006}
     */
  }, {
    key: "rateWord",
    value: function rateWord(word, callback) {
      var postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling rateWord");
      }
      var pathParams = {};
      var queryParams = {
        'word': word
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse3["default"];
      return this.apiClient.callApi('/words/rate', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchGifs operation.
     * @callback module:com.humorapi.client/com.humorapi/OtherApi~searchGifsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.humorapi.client/com.humorapi.client.model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Gifs
     * Search for gifs. See https://humorapi.com/docs/#Search-Gifs for more.
     * @param {String} query A search query.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.number The number of results to retrieve between 1 and 10.
     * @param {module:com.humorapi.client/com.humorapi/OtherApi~searchGifsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.humorapi.client/com.humorapi.client.model/InlineResponse2001}
     */
  }, {
    key: "searchGifs",
    value: function searchGifs(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchGifs");
      }
      var pathParams = {};
      var queryParams = {
        'query': query,
        'number': opts['number']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/gif/search', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return OtherApi;
}();